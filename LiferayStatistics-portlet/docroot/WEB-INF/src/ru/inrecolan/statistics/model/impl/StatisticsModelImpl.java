/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.inrecolan.statistics.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.inrecolan.statistics.model.Statistics;
import ru.inrecolan.statistics.model.StatisticsModel;
import ru.inrecolan.statistics.model.StatisticsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Statistics service. Represents a row in the &quot;Statistics_Statistics&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.inrecolan.statistics.model.StatisticsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StatisticsImpl}.
 * </p>
 *
 * @author sea
 * @see StatisticsImpl
 * @see ru.inrecolan.statistics.model.Statistics
 * @see ru.inrecolan.statistics.model.StatisticsModel
 * @generated
 */
@JSON(strict = true)
public class StatisticsModelImpl extends BaseModelImpl<Statistics>
	implements StatisticsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a statistics model instance should use the {@link ru.inrecolan.statistics.model.Statistics} interface instead.
	 */
	public static final String TABLE_NAME = "Statistics_Statistics";
	public static final Object[][] TABLE_COLUMNS = {
			{ "statId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "actionDate", Types.TIMESTAMP },
			{ "action", Types.VARCHAR },
			{ "portletId", Types.VARCHAR },
			{ "url", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Statistics_Statistics (statId LONG not null primary key,userId LONG,groupId LONG,actionDate DATE null,action VARCHAR(2000) null,portletId VARCHAR(2000) null,url VARCHAR(2000) null)";
	public static final String TABLE_SQL_DROP = "drop table Statistics_Statistics";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.inrecolan.statistics.model.Statistics"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.inrecolan.statistics.model.Statistics"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Statistics toModel(StatisticsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Statistics model = new StatisticsImpl();

		model.setStatId(soapModel.getStatId());
		model.setUserId(soapModel.getUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setActionDate(soapModel.getActionDate());
		model.setAction(soapModel.getAction());
		model.setPortletId(soapModel.getPortletId());
		model.setUrl(soapModel.getUrl());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Statistics> toModels(StatisticsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Statistics> models = new ArrayList<Statistics>(soapModels.length);

		for (StatisticsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.ru.inrecolan.statistics.model.Statistics"));

	public StatisticsModelImpl() {
	}

	public long getPrimaryKey() {
		return _statId;
	}

	public void setPrimaryKey(long primaryKey) {
		setStatId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_statId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Statistics.class;
	}

	public String getModelClassName() {
		return Statistics.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("statId", getStatId());
		attributes.put("userId", getUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("actionDate", getActionDate());
		attributes.put("action", getAction());
		attributes.put("portletId", getPortletId());
		attributes.put("url", getUrl());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long statId = (Long)attributes.get("statId");

		if (statId != null) {
			setStatId(statId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date actionDate = (Date)attributes.get("actionDate");

		if (actionDate != null) {
			setActionDate(actionDate);
		}

		String action = (String)attributes.get("action");

		if (action != null) {
			setAction(action);
		}

		String portletId = (String)attributes.get("portletId");

		if (portletId != null) {
			setPortletId(portletId);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}
	}

	@JSON
	public long getStatId() {
		return _statId;
	}

	public void setStatId(long statId) {
		_statId = statId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public Date getActionDate() {
		return _actionDate;
	}

	public void setActionDate(Date actionDate) {
		_actionDate = actionDate;
	}

	@JSON
	public String getAction() {
		if (_action == null) {
			return StringPool.BLANK;
		}
		else {
			return _action;
		}
	}

	public void setAction(String action) {
		_action = action;
	}

	@JSON
	public String getPortletId() {
		if (_portletId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletId;
		}
	}

	public void setPortletId(String portletId) {
		_portletId = portletId;
	}

	@JSON
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Statistics.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Statistics toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Statistics)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public Statistics toUnescapedModel() {
		return (Statistics)this;
	}

	@Override
	public Object clone() {
		StatisticsImpl statisticsImpl = new StatisticsImpl();

		statisticsImpl.setStatId(getStatId());
		statisticsImpl.setUserId(getUserId());
		statisticsImpl.setGroupId(getGroupId());
		statisticsImpl.setActionDate(getActionDate());
		statisticsImpl.setAction(getAction());
		statisticsImpl.setPortletId(getPortletId());
		statisticsImpl.setUrl(getUrl());

		statisticsImpl.resetOriginalValues();

		return statisticsImpl;
	}

	public int compareTo(Statistics statistics) {
		long primaryKey = statistics.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Statistics)) {
			return false;
		}

		Statistics statistics = (Statistics)obj;

		long primaryKey = statistics.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Statistics> toCacheModel() {
		StatisticsCacheModel statisticsCacheModel = new StatisticsCacheModel();

		statisticsCacheModel.statId = getStatId();

		statisticsCacheModel.userId = getUserId();

		statisticsCacheModel.groupId = getGroupId();

		Date actionDate = getActionDate();

		if (actionDate != null) {
			statisticsCacheModel.actionDate = actionDate.getTime();
		}
		else {
			statisticsCacheModel.actionDate = Long.MIN_VALUE;
		}

		statisticsCacheModel.action = getAction();

		String action = statisticsCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			statisticsCacheModel.action = null;
		}

		statisticsCacheModel.portletId = getPortletId();

		String portletId = statisticsCacheModel.portletId;

		if ((portletId != null) && (portletId.length() == 0)) {
			statisticsCacheModel.portletId = null;
		}

		statisticsCacheModel.url = getUrl();

		String url = statisticsCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			statisticsCacheModel.url = null;
		}

		return statisticsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{statId=");
		sb.append(getStatId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", actionDate=");
		sb.append(getActionDate());
		sb.append(", action=");
		sb.append(getAction());
		sb.append(", portletId=");
		sb.append(getPortletId());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("ru.inrecolan.statistics.model.Statistics");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>statId</column-name><column-value><![CDATA[");
		sb.append(getStatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionDate</column-name><column-value><![CDATA[");
		sb.append(getActionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>action</column-name><column-value><![CDATA[");
		sb.append(getAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletId</column-name><column-value><![CDATA[");
		sb.append(getPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Statistics.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Statistics.class
		};
	private long _statId;
	private long _userId;
	private String _userUuid;
	private long _groupId;
	private Date _actionDate;
	private String _action;
	private String _portletId;
	private String _url;
	private Statistics _escapedModel;
}